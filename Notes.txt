

Agenda :

Polymorphism

- Method Overloading
- Method Overriding (Abstract class and virtual function)

- Constructor
- Destructor
- Sealed



Polymorphism => Many forms

1.Static Polymorphism : Compile time / early binding(method overloading , operator overloading)
2.Dynamic Polymorphism : run time / late binding (abstract , virtual)

Method Overloading : 

- Same method name with different signatures in the same class

* Different Datatype
* diff return type
* diff no of arguments passed 


Project : 

- do not use overloading 
- Do not use abstract classes
- Recommend you to go with interface concept

Property management 
Add_property()
Delete_Property()
Update_Property()
Select_Property()

- Create 4 interface and 4 classes that implements the interface

Design Pattern - SOLID (Best recommended)

interface interface1
{
Add_property()
}


class class1:interface1
{
}

interface interface2
{
Delete_property()
}


class class2:interface2
{
}

1bc --->1dc--->3dc


Constructor :

- Initialize the members of the class
- Gets invoked automatically whenever you create a instance
- Constructor name and class name should be same
- constructor should be public
- has no return types
- accept parameters
- can be overloaded

Types :

- Empty Constructor
- Parameterized constructor
- Copy constructor (not recommended)

Constructor overloading :

- more than one constructor in the class

Copy constructor :

- copy the content from already existing contructor to the new constructor

Destructor :

- destroy the instance of the class
- Destructor will call finalize() - (release the resource - remove db connect, close the file)
- only one destructor in the class
- does not have return type
- ~ => symbol indicates destrutor
- cannot overload destructor
- invoked once the program exit 

Sealed : 

- stand alone class
- cannot be inherited or shared or extending 
